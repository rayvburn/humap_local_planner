#!/usr/bin/env python
# HuBeRo Planner configuration

from dynamic_reconfigure.parameter_generator_catkin import ParameterGenerator, double_t, int_t, bool_t
from local_planner_limits import add_generic_localplanner_params

# http://wiki.ros.org/dynamic_reconfigure/Tutorials/HowToWriteYourFirstCfgFile
gen = ParameterGenerator()

# This unusual line allows to reuse existing parameter definitions that concern all localplanners
group_limits = gen.add_group("Limits", type="tab")
group_limits_generic_lp = group_limits.add_group("BaseLocalPlanner", type="hide")
add_generic_localplanner_params(group_limits_generic_lp)
group_limits_custom = group_limits.add_group("Custom", type="hide")
group_limits_custom.add("twist_rotation_compensation", double_t, 0, "Damping factor (inverted?) of the forceToVelocity transformation, ref. to (Ferrer, 2017). Defines how much the robot tries to additionally follow force direction compared to pure transformation of force into local velocity.", 0.25, 0.0, 2.0)
group_limits_custom.add("maintain_vel_components_rate", bool_t, 0, "When true and any vel. component is not within limits, others will be modified according to the one that cannot be changed as requested; others will be proportionally scaled; setting this to true loosely corresponds to agreeing with dynamics violation, but keeping the path as intended.", True)

#
group_general = gen.add_group("General", type="tab")

group_general.add("planning_approach", bool_t, 0, "Whether to use planning (True) or proactive approach (False) for trajectory generation", True)
group_general.add("sim_time", double_t, 0, "The amount of time to roll trajectories out for in seconds. Too high with impede high velocities as traj. points will exceed the local costmap.", 2.0, 0)
group_general.add("sim_granularity", double_t, 0, "The granularity with which to check for collisions along each trajectory in meters", 0.2, 0)
group_general.add("angular_sim_granularity", double_t, 0, "The granularity with which to check for collisions for rotations in radians", 0.1, 0)
group_general.add("local_goal_distance_multiplier", double_t, 0, "The factor for the distance from the center point of the robot to place the local goal for self-driven force calculation; consider reducing it for proactive approach; resultant distance must not exceed local costmap bounds.", 1.1, 0.10, 8.0)
group_general.add("obstacle_extension_multiplier", double_t, 0, "The factor by which robot's inscribed radius will be multiplied to caluclate distance between closest points of the robot footprint and environment object (static/dynamic)", 0.0, 0.0, 2.0)
group_general.add("person_model_radius", double_t, 0, "The radius of the circular representation of person-obstacle used by the sparse environment model", 0.4, 0.0, 2.0)
group_general.add("person_fov", double_t, 0, "Half of the field of view of a detected person", 3.31613 / 2.0, 0.0, +3.1415)
group_general.add("obstacles_closest_polygons_num", int_t, 0, "Number of closest polygons taken into consideration as obstacles; -1 represents all polygons; mainly for performance reasons", 5, -1, 100)
group_general.add("people_closest_num", int_t, 0, "Number of closest people taken into consideration during trajectory planning; -1 represents all detected people; mainly for performance reasons", 4, -1, 100)
group_general.add("groups_closest_num", int_t, 0, "Number of closest groups taken into consideration during trajectory planning; -1 represents all detected groups; mainly for performance reasons", 4, -1, 100)

# SFM group parameters
group_sfm = gen.add_group("SFM", type="tab")

group_sfm.add("fov", double_t, 0, "Half of the field of view of the robot", 2.00, 0.0, +3.14)
fov_enum = gen.enum([gen.const("SfmFovGaussian", int_t, 0, "Compute a value of the Gaussian in the normalized angle domain"),
                     gen.const("SfmFovLinear",   int_t, 1, "Objects within FOV range are considered as fully visible, linear decrease of the factor value towards +PI and -PI")],
                     "FOV factor calculation method")
group_sfm.add("sfm_fov_factor_method", int_t, 0, "Select the formulation that computes factor value that interaction forces will be multiplied by", 0, 0, 1, edit_method=fov_enum)
group_sfm.add("mass", double_t, 0, "Description", 14.5, 0.1, 250.0)
group_sfm.add("internal_force_factor", double_t, 0, "How much robot tries to reach the goal position using shortest path to goal. For non-planning approach keep it at approx. 4.2", 0.75, 0.0, 50.0)
group_sfm.add("static_interaction_force_factor", double_t, 0, "How much robot tries to maintain safe distance from static obstacles. For non-planning approach keep it at approx. 11.0", 4.9, 0.0, 300.0)
group_sfm.add("dynamic_interaction_force_factor", double_t, 0, "How much robot tries to maintain safe distance from dynamic obstacles", 5.0, 0.0, 300.0)
group_sfm.add("min_force", double_t, 0, "Minimum force - vectors shorter than that will be extended, which may prevent from being stuck.", 5.0, 0.0, 100.0)
group_sfm.add("max_force", double_t, 0, "Maximum force - vectors longer than that will be truncated", 300.0, 0.0, 1500.0)
group_sfm.add("heterogenous_population", bool_t, 0, "Setting true causes SFM params to be defined in non-deterministic way (std deviation around mean value)", False)
soi_enum = gen.enum([ gen.const("elliptical",      	int_t, 0, "a.k.a. v2014"),
                       gen.const("repulsive_evasive",	int_t, 1, "a.k.a. v2011")],
                     "Static Object Interaction")
group_sfm.add("static_object_interaction_type", int_t, 0, "Description", 0, 0, 1, edit_method=soi_enum)
group_sfm.add("human_force_formulation_dynamic", bool_t, 0, "Whether to use a force formulation designated for an interaction with dynamic objects regardless of the human's speed", True)
group_sfm.add("filter_forces", bool_t, 0, "Whether to apply filtering operations to the resultant forces", False)
group_sfm.add("disable_interaction_forces", bool_t, 0, "Description", False)

group_param_eqn_mean = group_sfm.add_group("EquationParams", type="hide")
SFM_PARAM_MIN = -50.0
SFM_PARAM_MAX = +50.0
# Values below include custom multipliers as these are directly used in the non-planning approach
group_param_eqn_mean.add("an", double_t, 0, "Base parameter value estimated in a paper Seer et al., 2014, here multiplied by a custom multiplier", 0.2615 *   -8.000, SFM_PARAM_MIN, SFM_PARAM_MAX)
group_param_eqn_mean.add("bn", double_t, 0, "Base parameter value estimated in a paper Seer et al., 2014, here multiplied by a custom multiplier", 0.4026 *   +5.000, SFM_PARAM_MIN, SFM_PARAM_MAX)
group_param_eqn_mean.add("cn", double_t, 0, "Base parameter value estimated in a paper Seer et al., 2014, here multiplied by a custom multiplier", 2.1614 *   +1.500, SFM_PARAM_MIN, SFM_PARAM_MAX)
group_param_eqn_mean.add("ap", double_t, 0, "Base parameter value estimated in a paper Seer et al., 2014, here multiplied by a custom multiplier", 1.5375 *   +1.000, SFM_PARAM_MIN, SFM_PARAM_MAX)
group_param_eqn_mean.add("bp", double_t, 0, "Base parameter value estimated in a paper Seer et al., 2014, here multiplied by a custom multiplier", 0.4938 *   +2.000, SFM_PARAM_MIN, SFM_PARAM_MAX)
group_param_eqn_mean.add("cp", double_t, 0, "Base parameter value estimated in a paper Seer et al., 2014, here multiplied by a custom multiplier", 0.5710 *   +0.800, SFM_PARAM_MIN, SFM_PARAM_MAX)
group_param_eqn_mean.add("aw", double_t, 0, "Base parameter value estimated in a paper Seer et al., 2014, here multiplied by a custom multiplier", 0.3280 * +123.139, SFM_PARAM_MIN, SFM_PARAM_MAX)
group_param_eqn_mean.add("bw", double_t, 0, "Base parameter value estimated in a paper Seer et al., 2014, here multiplied by a custom multiplier", 0.1871 *   +1.200, SFM_PARAM_MIN, SFM_PARAM_MAX)
group_param_eqn_mean.add("speed_desired",   double_t, 0, "Base parameter value estimated in a paper Moussaid et al., 2009", 1.29, 0.0, SFM_PARAM_MAX)
group_param_eqn_mean.add("relaxation_time", double_t, 0, "Base parameter value estimated in a paper Moussaid et al., 2009", 0.54, 0.0, SFM_PARAM_MAX)

group_param_eqn_stddev = group_sfm.add_group("EquationParamsStdDev", type="hide")
SFM_STDDEV_MIN = -5.0
SFM_STDDEV_MAX = +5.0
group_param_eqn_stddev.add("an_stddev", double_t, 0, "Standard deviation; default value of the parameter was estimated in Seer et al., 2014", 0.0551, SFM_STDDEV_MIN, SFM_STDDEV_MAX)
group_param_eqn_stddev.add("bn_stddev", double_t, 0, "Standard deviation; default value of the parameter was estimated in Seer et al., 2014", 0.1238, SFM_STDDEV_MIN, SFM_STDDEV_MAX)
group_param_eqn_stddev.add("cn_stddev", double_t, 0, "Standard deviation; default value of the parameter was estimated in Seer et al., 2014", 0.3728, SFM_STDDEV_MIN, SFM_STDDEV_MAX)
group_param_eqn_stddev.add("ap_stddev", double_t, 0, "Standard deviation; default value of the parameter was estimated in Seer et al., 2014", 0.3084, SFM_STDDEV_MIN, SFM_STDDEV_MAX)
group_param_eqn_stddev.add("bp_stddev", double_t, 0, "Standard deviation; default value of the parameter was estimated in Seer et al., 2014", 0.1041, SFM_STDDEV_MIN, SFM_STDDEV_MAX)
group_param_eqn_stddev.add("cp_stddev", double_t, 0, "Standard deviation; default value of the parameter was estimated in Seer et al., 2014", 0.1409, SFM_STDDEV_MIN, SFM_STDDEV_MAX)
group_param_eqn_stddev.add("aw_stddev", double_t, 0, "Standard deviation; default value of the parameter was estimated in Seer et al., 2014", 0.1481, SFM_STDDEV_MIN, SFM_STDDEV_MAX)
group_param_eqn_stddev.add("bw_stddev", double_t, 0, "Standard deviation; default value of the parameter was estimated in Seer et al., 2014", 0.0563, SFM_STDDEV_MIN, SFM_STDDEV_MAX)
group_param_eqn_stddev.add("speed_desired_stddev",   double_t, 0, "Standard deviation; default value of the parameter was estimated in Moussaid et al., 2009", 0.19, SFM_STDDEV_MIN, SFM_STDDEV_MAX)
group_param_eqn_stddev.add("relaxation_time_stddev", double_t, 0, "Standard deviation; default value of the parameter was estimated in Moussaid et al., 2009", 0.05, SFM_STDDEV_MIN, SFM_STDDEV_MAX)

# Fuzzy Inference System group parameters
group_fis = gen.add_group("FIS", type="tab")
group_fis.add("force_factor", double_t, 0, "Factor to multiply resultant human action force with", 30.0, 0.0, 100.0)
group_fis.add("human_action_range", double_t, 0, "Distance at which any human action force fade completely", 8.0, 0.0, 10.0)
fov_enum = gen.enum([gen.const("FisFovGaussian", int_t, 0, "Compute a value of the Gaussian in the normalized angle domain"),
                     gen.const("FisFovLinear",   int_t, 1, "Objects within FOV range are considered as fully visible, linear decrease of the factor value towards +PI and -PI"),
                     gen.const("FisFovNone",     int_t, 2, "FOV factor of humans will not be considered")],
                     "FOV factor calculation method")
group_fis.add("fis_fov_factor_method", int_t, 0, "Select the formulation that computes factor value that interaction forces will be multiplied by", 0, 0, 2, edit_method=fov_enum)
group_fis.add("as", double_t, 0, "Levelling factor that also directly affects amplitude of the resultant force", 1.1865, 0.0, 10.0)

# Equisampled trajectory generation group parameters
group_traj_gen = gen.add_group("TrajectoryGeneration", type="tab")
group_traj_gen.add("use_equisampled_velocities_generator", bool_t, 0, "True enables generator that produces evenly spaced elements from a list of feasible velocities", True)
group_traj_gen.add("use_social_trajectory_generator", bool_t, 0, "True enables generator that produces model-based trajectories", True)
group_traj_gen.add("equisampled_continued_acceleration", bool_t, 0, "If set to true, the generator will recompute feasible velocities in each step and will restrict the velocities to those that do not overshoot the goal in sim_time. Otherwise, when false, the generator will sample velocities during the first iteration and will not take the goal into account (as in DWA approach). Legacy parameter name (nav. stack) `use_dwa`", False)
group_traj_gen.add("equisampled_vx", int_t, 0, "How many velocity samples along platform's X axis will be checked", 3, 0, 40)
group_traj_gen.add("equisampled_vy", int_t, 0, "How many velocity samples along platform's Y axis will be checked", 1, 0, 40)
group_traj_gen.add("equisampled_vth", int_t, 0, "How many velocity samples around platform's Z axis will be checked", 10, 0, 40)
group_traj_gen.add("equisampled_min_vel_x", double_t, 0, "Minimum linear velocity that is used by the equisampled velocities generator", 0.10, -0.5, 3.0)

# Trajectory sampling group parameters
group_traj_social = gen.add_group("TrajectorySocial", type="tab")
STG_AMP_MIN = -200.0 # default minimum value of an amplifier
STG_AMP_MAX = +200.0 # default maximum value of an amplifier
STG_GRN_MIN = 0.0 # default minimum value of an amplifier's granularity
STG_GRN_MAX = +50.0 # default minimum value of an amplifier's granularity
# Meaningful range: 0.50 - 1.50 with a granularity of 0.50
group_traj_social_speed = group_traj_social.add_group("SpeedDesired", type="hide")
group_traj_social_speed.add("sfm_desired_speed_amplifier_min",         double_t, 0, "", +1.00, STG_AMP_MIN, STG_AMP_MAX)
group_traj_social_speed.add("sfm_desired_speed_amplifier_max",         double_t, 0, "", +1.00, STG_AMP_MIN, STG_AMP_MAX)
group_traj_social_speed.add("sfm_desired_speed_amplifier_granularity", double_t, 0, "", +1.00, STG_GRN_MIN, STG_GRN_MAX)
# Parameters related to the interaction forces with dynamic objects
## An: slightly affects trajectories but only when there are dynamic objects nearby.
## Meaningful range: 0.0 - 200.00 with a granularity of 100.0.
group_traj_social_an = group_traj_social.add_group("An", type="hide")
group_traj_social_an.add("sfm_an_amplifier_min",         double_t, 0, "", +1.00, STG_AMP_MIN, STG_AMP_MAX)
group_traj_social_an.add("sfm_an_amplifier_max",         double_t, 0, "", +1.00, STG_AMP_MIN, STG_AMP_MAX)
group_traj_social_an.add("sfm_an_amplifier_granularity", double_t, 0, "", +1.00, STG_GRN_MIN, STG_GRN_MAX)
## Bn: negligible effect of manipulating the amplifier values
group_traj_social_bn = group_traj_social.add_group("Bn", type="hide")
group_traj_social_bn.add("sfm_bn_amplifier_min",         double_t, 0, "", +1.00, STG_AMP_MIN, STG_AMP_MAX)
group_traj_social_bn.add("sfm_bn_amplifier_max",         double_t, 0, "", +1.00, STG_AMP_MIN, STG_AMP_MAX)
group_traj_social_bn.add("sfm_bn_amplifier_granularity", double_t, 0, "", +1.00, STG_GRN_MIN, STG_GRN_MAX)
## Cn: negative amp. values produce failures in static obstacle interaction forces (NaNs).
## Introduces some effects for values from -1.0 to 1.0 with a granularity of 0.1, but still, rather very similar
## trajectories will be obtained.
group_traj_social_cn = group_traj_social.add_group("Cn", type="hide")
group_traj_social_cn.add("sfm_cn_amplifier_min",         double_t, 0, "", -1.00, STG_AMP_MIN, STG_AMP_MAX)
group_traj_social_cn.add("sfm_cn_amplifier_max",         double_t, 0, "", +1.00, STG_AMP_MIN, STG_AMP_MAX)
group_traj_social_cn.add("sfm_cn_amplifier_granularity", double_t, 0, "", +1.00, STG_GRN_MIN, STG_GRN_MAX) # consider +2.0 for performance
## Ap: the effects are visible when dynamic objects are nearby.
## Effective range from -60 to 80 (with granularity of 5.0).
group_traj_social_ap = group_traj_social.add_group("Ap", type="hide")
## Bp: negligible (minimal effect observed for the range 0.0 - 5.0 with a granularity of 5.0).
group_traj_social_bp = group_traj_social.add_group("Bp", type="hide")
## Cp: changing this parameter produces very similar trajectories, except the negative values.
## Meaningful range is from -6.0 to 1.0.
## The biggest spread (with dynamic objects) observed at -6.0 - -4.0 with a granularity of 0.5. However, such a range
## might lead to trajectories that are not feasible (e.g., violate min vel. limits).
group_traj_social_cp = group_traj_social.add_group("Cp", type="hide")
group_traj_social_cp.add("sfm_cp_amplifier_min",         double_t, 0, "", -2.00, STG_AMP_MIN, STG_AMP_MAX) # gives a wider spread than -4.0
group_traj_social_cp.add("sfm_cp_amplifier_max",         double_t, 0, "", +1.00, STG_AMP_MIN, STG_AMP_MAX)
group_traj_social_cp.add("sfm_cp_amplifier_granularity", double_t, 0, "", +3.00, STG_GRN_MIN, STG_GRN_MAX)
# Parameters related to the interaction forces with static objects
## Aw: amplyfing the parameter has a significant impact on generated trajectories for the range
## of -10.0 - +65.0 with a granularity of 5.0.
group_traj_social_aw = group_traj_social.add_group("Aw", type="hide")
group_traj_social_aw.add("sfm_aw_amplifier_min",         double_t, 0, "", +0.00, STG_AMP_MIN, STG_AMP_MAX)
group_traj_social_aw.add("sfm_aw_amplifier_max",         double_t, 0, "", +1.00, STG_AMP_MIN, STG_AMP_MAX)
## Bw: effective range is 0.0 - 4.0 (visible at a granularity up to 1.0).
group_traj_social_bw = group_traj_social.add_group("Bw", type="hide")
group_traj_social_bw.add("sfm_bw_amplifier_min",         double_t, 0, "", +1.00, STG_AMP_MIN, STG_AMP_MAX)
group_traj_social_bw.add("sfm_bw_amplifier_max",         double_t, 0, "", +2.00, STG_AMP_MIN, STG_AMP_MAX)
group_traj_social_bw.add("sfm_bw_amplifier_granularity", double_t, 0, "", +1.00, STG_GRN_MIN, STG_GRN_MAX)
## As: tested with dynamic objects in front of the robot. Slight differences in trajectories with amplifiers
## within 1.0 - 51.0 (gran. 50.0). Increasing the main As factor makes more sense here.
group_traj_social_as = group_traj_social.add_group("As", type="hide")
group_traj_social_as.add("fis_as_amplifier_min",         double_t, 0, "", +1.00, STG_AMP_MIN, STG_AMP_MAX)
group_traj_social_as.add("fis_as_amplifier_max",         double_t, 0, "", +1.00, STG_AMP_MIN, STG_AMP_MAX)
group_traj_social_as.add("fis_as_amplifier_granularity", double_t, 0, "", +1.00, STG_GRN_MIN, STG_GRN_MAX)

# Trajectory generation group parameters
group_cost = gen.add_group("Cost", type="tab")

## Weights/scales of the cost functions
# Performance tuning was performed using `path_distance_scale` initially set to 7.7. Values up to 14.0 provide
# reasonable results (9.9, 11.0, 12.0 were also tested).
group_cost.add("path_distance_scale", double_t, 0, "The weight for the path distance part of the cost function", 10.0, 0.0)
# Note that `goal_distance_scale` at 17.5 may slow down the robot just before the goal (e.g., near walls).
group_cost.add("goal_distance_scale", double_t, 0, "The weight for the goal distance part of the cost function", 17.5, 0.0)
group_cost.add("occdist_scale", double_t, 0, "The weight for the obstacle distance part of the cost function", 0.02, 0.0)
group_cost.add("occdist_sum_scores", bool_t, 0, "Whether to sum up the scores along the path or use the maximum one", False)
group_cost.add("occdist_separation", double_t, 0, "The minimum separation that should be kept from obstacles", 0.025, 0.0)
occdist_kernel = gen.enum([
  gen.const("SeparationKernelCross", int_t, 0, "Kernel checking points located at `occdist_separation`: in front of, behind, on the right, and on the left."),
  gen.const("SeparationKernelRectangle", int_t, 1, "Kernel checking points located at `occdist_separation` at 8 surrounding directions.")
  ],
  "Occdist Separation Kernel Type")
group_cost.add("occdist_separation_kernel", int_t, 0, "Type of kernel that the robot's footprint is enlarged with.", 1, 0, 1, edit_method=occdist_kernel)
group_cost.add("ttc_scale", double_t, 0, "The weight for the time to collision cost function (scores a whole trajectory instead of a single cell)", 3.0, 0.0)
group_cost.add("alignment_scale", double_t, 0, "The weight for the alignment with the global plan. In a classical DWA implementation equal to `path_distance_scale`", 1.5, 0.0)
group_cost.add("goal_front_scale", double_t, 0, "The weight for the achievement of the additional goal point placed in front of the mobile base. In a classical DWA implementation equal to `goal_distance_scale`", 8.0, 0.0)

group_cost.add("backward_scale", double_t, 0, "The weight for the backward motion penalisation", 0.08, 0.0)
group_cost.add("heading_change_smoothness_scale", double_t, 0, "The weight for the cost function that penalizes robot rotational velocity changes", 11.0, 0.0)
group_cost.add("velocity_smoothness_scale", double_t, 0, "The weight for the cost function that penalizes velocity changes along trajectory", 15.0, 0.0)
group_cost.add("backward_penalty", double_t, 0, "Penalty (cost) value assigned to trajectory that starts with backward motion", 25.0, 0.0)
group_cost.add("heading_dir_scale", double_t, 0, "The weight for the cost function that penalizes trajectories that leading towards human center", 10.0, 0.0)
group_cost.add("personal_space_scale", double_t, 0, "The weight for the cost function that penalizes trajectories that intrude human personal space", 25.0, 0.0)
group_cost.add("fformation_space_scale", double_t, 0, "The weight for the cost function that penalizes trajectories that intrude F-formation space", 30.0, 0.0)
group_cost.add("passing_speed_scale", double_t, 0, "The weight for the cost function that penalizes robot trajectories that are not compliant with proper speeds of passing people", 1.0, 0.0)

## Parameters of the cost functions
group_cost.add("oscillation_reset_dist", double_t, 0, "The distance the robot must travel before oscillation flags are reset, in meters", 0.05, 0.0)
group_cost.add("oscillation_reset_angle", double_t, 0, "The angle the robot must turn before oscillation flags are reset, in radians", 0.2, 0.0)

# Unused, see issue #113 for 2 parameters below
group_cost.add("scaling_speed", double_t, 0, "The absolute value of the velocity at which to start scaling the robot's footprint, in m/s", 0.25, 0.0)
group_cost.add("max_scaling_factor", double_t, 0, "The maximum factor to scale the robot's footprint by", 0.2, 0.0)

group_cost.add("ttc_rollout_time", double_t, 0, "The duration of maximum world state prediction to detect robot collision (further beyond `sim_time`)", 0.0, 0.0)
group_cost.add("ttc_collision_distance", double_t, 0, "The distance threshold for collision detection in TTC prediction", 0.05, 0.0)

group_cost.add("forward_point_distance", double_t, 0, "The distance from the center point of the robot to place an additional scoring point, in meters. Set to zero to discard alignment.", 0.325, 0.1, 2.0)

# Diagnostics
group_diagnostics = gen.add_group("Diagnostics", type="tab")
group_diagnostics.add("log_trajectory_generation_samples", bool_t, 0, "Whether to print info on samples used for trajectory generation", False)
group_diagnostics.add("log_trajectory_generation_details", bool_t, 0, "Whether to print info on motion drivers (forces) of a specific trajectory", False)
group_diagnostics.add("log_trajectory_generation_fails", bool_t, 0, "Whether to print info on unsuccessful attempt to trajectory generation", False)
group_diagnostics.add("log_trajectory_generation_forces", bool_t, 0, "Whether to print info on force amplitudes for given set of parameter amplifiers", False)
group_diagnostics.add("log_explored_trajectories", bool_t, 0, "Whether to print info on explored trajectories", False)
group_diagnostics.add("log_pts_of_explored_trajectories", bool_t, 0, "Whether to print info on points of explored trajectories", False)
group_diagnostics.add("log_trajectory_cost_details", bool_t, 0, "Whether to print info on cost of the best trajectory", False)
group_diagnostics.add("force_robot_stop", bool_t, 0, "Whether to force stoppage of robot without disabling planning (useful for cost tuning)", False)

# Other
gen.add("restore_defaults", bool_t, 0, "Restore to the original configuration.", False)

exit(gen.generate("hubero_local_planner", "hubero_local_planner", "HuberoPlanner"))
