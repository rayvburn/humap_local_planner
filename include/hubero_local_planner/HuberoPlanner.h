#pragma once

#include <vector>
#include <Eigen/Core>

#include <hubero_local_planner/HuberoPlannerConfig.h>

//for creating a local cost grid
#include <base_local_planner/map_grid_visualizer.h>
#include <pcl_ros/publisher.h>

//for obstacle data access
#include <costmap_2d/costmap_2d.h>

#include <base_local_planner/trajectory.h>
#include <base_local_planner/local_planner_limits.h>
#include <base_local_planner/local_planner_util.h>
#include <base_local_planner/simple_trajectory_generator.h>

#include <base_local_planner/oscillation_cost_function.h>
#include <base_local_planner/map_grid_cost_function.h>
#include <base_local_planner/obstacle_cost_function.h>
#include <base_local_planner/twirling_cost_function.h>
#include <base_local_planner/simple_scored_sampling_planner.h>

// MapGridVisualizer
#include <base_local_planner/map_grid.h>

#include <nav_msgs/Path.h>

namespace hubero_local_planner {
/**
 * @class HuberoPlanner
 * @brief A class implementing a local planner using the HuberoPlanner
 */
class HuberoPlanner {
public:
    /**
     * @brief  Constructor for the planner
     * @param name The name of the planner 
     * @param costmap_ros A pointer to the costmap instance the planner should use
     * @param global_frame the frame id of the tf frame to use
     */
    HuberoPlanner(std::string name, base_local_planner::LocalPlannerUtil *planner_util);

    /**
     * @brief  Destructor for the planner
     */
    virtual ~HuberoPlanner();

    /**
     * @brief Reconfigures the trajectory planner
     */
    void reconfigure(HuberoPlannerConfig &cfg);

private:
	base_local_planner::LocalPlannerUtil *planner_util_;
	base_local_planner::Trajectory result_traj_;

	///< @brief The map grid visualizer for outputting the potential field generated by the cost function
    base_local_planner::MapGridVisualizer map_viz_;

      // see constructor body for explanations
    base_local_planner::SimpleTrajectoryGenerator generator_;
    base_local_planner::OscillationCostFunction oscillation_costs_;
    base_local_planner::ObstacleCostFunction obstacle_costs_;
    base_local_planner::MapGridCostFunction path_costs_;
    base_local_planner::MapGridCostFunction goal_costs_;
    base_local_planner::MapGridCostFunction goal_front_costs_;
    base_local_planner::MapGridCostFunction alignment_costs_;
    base_local_planner::TwirlingCostFunction twirling_costs_;

    base_local_planner::SimpleScoredSamplingPlanner scored_sampling_planner_;

}; // class HuberoPlanner
}; // namespace hubero_local_planner
