#pragma once

#include <ros/node_handle.h>
#include <hubero_local_planner/HuberoPlannerConfig.h> //!< Dynamic reconfigure struct
#include <hubero_local_planner/hubero_config.h>

namespace hubero_local_planner {

class HuberoConfigROS: public HuberoConfig {
public:
	std::string odom_topic; //!< Topic name of the odometry message, provided by the robot driver or simulator
	std::string map_frame; //!< Global planning frame

	HuberoConfigROS() = default;

	/**
	 * @brief Loads params from ROS parameter server
	 * @param nh: local ros::NodeHandle (searches for parameters in the @ref nh's namespace)
	 */
	void loadFromParamServer(const ros::NodeHandle& nh);

	/**
	 * @brief Reconfigures params from the dynamic_reconfigure config.
	 * @param cfg: Config class autogenerated by dynamic_reconfigure according to the cfg-file mentioned above.
	 */
	void reconfigure(HuberoPlannerConfig& cfg);

	virtual ~HuberoConfigROS() = default;

private:
	std::mutex config_mutex_; //!< Mutex for config accesses and changes
};

typedef std::shared_ptr<const HuberoConfigROS> HuberoConfigROSConstPtr;

} /* namespace hubero_local_planner */
